name: Deploy to Production

on:
  push:
    branches: [master]
    paths:
      - "drop_agent/**"
      - "main.py"
      - "requirements.txt"
      - "frontend/**"
      - "Dockerfile"
      - ".github/workflows/deploy.yml"
  pull_request:
    branches: [master]
    paths:
      - "drop_agent/**"
      - "main.py"
      - "requirements.txt"
      - "frontend/**"
      - "Dockerfile"
      - ".github/workflows/deploy.yml"
  workflow_dispatch:

env:
  GOOGLE_CLOUD_PROJECT: ${{ secrets.GOOGLE_CLOUD_PROJECT }}
  GOOGLE_CLOUD_LOCATION: ${{ secrets.GOOGLE_CLOUD_LOCATION }}
  GOOGLE_GENAI_USE_VERTEXAI: ${{ secrets.GOOGLE_GENAI_USE_VERTEXAI }}
  REASONING_ENGINE_ID: ${{ secrets.REASONING_ENGINE_ID }}
  ENV: production

jobs:
  deploy-backend:
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    name: Deploy Backend
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GOOGLE_CLOUD_SA_KEY }}

      - name: Setup Google Cloud CLI
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GOOGLE_CLOUD_PROJECT }}

      - name: Install dependencies
        run: |
          pip install -r requirements.txt

      - name: Deploy Backend to Cloud Run
        run: |
          echo "üöÄ Deploying backend to Cloud Run..."
          gcloud run deploy drop-agent-service \
            --source . \
            --region ${{ secrets.GOOGLE_CLOUD_LOCATION }} \
            --allow-unauthenticated \
            --service-account ${{ secrets.GOOGLE_CLOUD_PROJECT }}@appspot.gserviceaccount.com \
            --set-env-vars="GOOGLE_CLOUD_PROJECT=${{ secrets.GOOGLE_CLOUD_PROJECT }},\
          GOOGLE_CLOUD_LOCATION=${{ secrets.GOOGLE_CLOUD_LOCATION }},\
          GOOGLE_GENAI_USE_VERTEXAI=${{ secrets.GOOGLE_GENAI_USE_VERTEXAI }},\
          REASONING_ENGINE_ID=${{ secrets.REASONING_ENGINE_ID }},\
          ENV=${{ env.ENV }},\
          FIREBASE_PROJECT_ID=${{ secrets.GOOGLE_CLOUD_PROJECT }}"

  deploy-frontend:
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    name: Deploy Frontend
    runs-on: ubuntu-latest
    needs: deploy-backend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GOOGLE_CLOUD_SA_KEY }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Setup Google Cloud CLI
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GOOGLE_CLOUD_PROJECT }}

      - name: Install Firebase CLI
        run: npm install -g firebase-tools

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci

      - name: Install Firebase Functions dependencies
        run: |
          cd frontend/functions
          npm ci

      - name: Build frontend
        run: |
          cd frontend
          npm run build

      - name: Deploy frontend to Firebase Hosting
        env:
          PAYSTACK_SECRET_KEY: ${{ secrets.PAYSTACK_LIVE_SECRET_KEY }}
          PAYSTACK_PUBLIC_KEY: ${{ secrets.PAYSTACK_LIVE_PUBLIC_KEY }}
          FRONTEND_URL: https://${{ secrets.GOOGLE_CLOUD_PROJECT }}.web.app
          NODE_ENV: production
        run: |
          cd frontend
          firebase deploy --only hosting:82ndrop,functions,firestore,storage,database --project=${{ secrets.GOOGLE_CLOUD_PROJECT }}

  notify-success:
    name: Notify Success
    runs-on: ubuntu-latest
    needs: [deploy-backend, deploy-frontend]
    if: always()
    steps:
      - name: Deployment Status
        run: |
          if [ "${{ needs.deploy-backend.result }}" == "success" ] && [ "${{ needs.deploy-frontend.result }}" == "success" ]; then
            echo "‚úÖ Deployment successful!"
            echo "üåê Frontend: https://${{ secrets.GOOGLE_CLOUD_PROJECT }}.web.app"
            echo "üîß Backend: https://drop-agent-service-${{ secrets.GOOGLE_CLOUD_PROJECT }}.${{ secrets.GOOGLE_CLOUD_LOCATION }}.run.app"
          else
            echo "‚ùå Deployment failed!"
            echo "Backend status: ${{ needs.deploy-backend.result }}"
            echo "Frontend status: ${{ needs.deploy-frontend.result }}"
            exit 1
          fi
