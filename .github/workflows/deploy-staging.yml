name: Deploy to Staging

on:
  push:
    branches: [staging]
  pull_request:
    branches: [staging]
  workflow_dispatch:

env:
  GOOGLE_CLOUD_PROJECT: ${{ secrets.STAGING_GOOGLE_CLOUD_PROJECT }}
  GOOGLE_CLOUD_LOCATION: ${{ secrets.STAGING_GOOGLE_CLOUD_LOCATION }}
  GOOGLE_GENAI_USE_VERTEXAI: ${{ secrets.STAGING_GOOGLE_GENAI_USE_VERTEXAI }}
  REASONING_ENGINE_ID: ${{ secrets.STAGING_REASONING_ENGINE_ID }}
  ENV: staging

jobs:
  deploy-backend:
    name: Deploy Staging Backend
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.STAGING_GOOGLE_CLOUD_SA_KEY }}

      - name: Setup Google Cloud CLI
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.STAGING_GOOGLE_CLOUD_PROJECT }}

      - name: Install dependencies
        run: |
          pip install -r requirements.txt

      - name: Deploy Backend to Cloud Run (Staging)
        run: |
          echo "üöÄ Deploying backend to Cloud Run (staging)..."
          gcloud run deploy drop-agent-staging \
            --source . \
            --region ${{ secrets.STAGING_GOOGLE_CLOUD_LOCATION }} \
            --allow-unauthenticated \
            --port 8000 \
            --service-account ${{ secrets.STAGING_GOOGLE_CLOUD_PROJECT }}@appspot.gserviceaccount.com \
            --set-env-vars="GOOGLE_CLOUD_PROJECT=${{ secrets.STAGING_GOOGLE_CLOUD_PROJECT }},\
          GOOGLE_CLOUD_LOCATION=${{ secrets.STAGING_GOOGLE_CLOUD_LOCATION }},\
          GOOGLE_GENAI_USE_VERTEXAI=${{ secrets.STAGING_GOOGLE_GENAI_USE_VERTEXAI }},\
          REASONING_ENGINE_ID=${{ secrets.STAGING_REASONING_ENGINE_ID }},\
          ENV=staging,\
          FIREBASE_PROJECT_ID=${{ secrets.STAGING_GOOGLE_CLOUD_PROJECT }}"

      - name: Verify backend deployment
        run: |
          echo "‚úÖ Verifying staging backend deployment..."
          sleep 30
          curl -f https://drop-agent-staging-${{ secrets.STAGING_GOOGLE_CLOUD_PROJECT }}.${{ secrets.STAGING_GOOGLE_CLOUD_LOCATION }}.run.app/ || exit 1

  deploy-frontend:
    name: Deploy Staging Frontend
    runs-on: ubuntu-latest
    needs: deploy-backend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.STAGING_GOOGLE_CLOUD_SA_KEY }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Setup Google Cloud CLI
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.STAGING_GOOGLE_CLOUD_PROJECT }}

      - name: Install Firebase CLI
        run: npm install -g firebase-tools

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci

      - name: Build frontend
        run: |
          cd frontend
          npm run build -- --configuration=production

      - name: Deploy frontend to Firebase Hosting (Staging)
        run: |
          cd frontend
          firebase deploy --only hosting:82ndrop-staging --project=${{ secrets.STAGING_GOOGLE_CLOUD_PROJECT }}

  notify-success:
    name: Notify Staging Success
    runs-on: ubuntu-latest
    needs: [deploy-backend, deploy-frontend]
    if: always()
    steps:
      - name: Staging Deployment Status
        run: |
          if [ "${{ needs.deploy-backend.result }}" == "success" ] && [ "${{ needs.deploy-frontend.result }}" == "success" ]; then
            echo "‚úÖ Staging deployment successful!"
            echo "üåê Frontend (staging): https://82ndrop-staging.web.app"
            echo "üîß Backend (staging): https://drop-agent-staging-${{ secrets.STAGING_GOOGLE_CLOUD_PROJECT }}.${{ secrets.STAGING_GOOGLE_CLOUD_LOCATION }}.run.app"
          else
            echo "‚ùå Staging deployment failed!"
            echo "Backend status: ${{ needs.deploy-backend.result }}"
            echo "Frontend status: ${{ needs.deploy-frontend.result }}"
            exit 1
          fi
